version: '3.3'
services:
  eventum_serv:
    container_name: eventumserv
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
    ports:
      - '3001:3001'
    command: bin/server
    links:
      - eventumdb
      - pgbouncer
      - eventum_auth
    working_dir: /home/eventum
    networks:
      - backend
    build:
      context: ../.
      dockerfile: ./build/server.dockerfile

  eventum_auth:
    container_name: eventumauth
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    ports:
      - '3002:3002'
    command: bin/auth
    links:
      - eventumdb
      - pgbouncer
    working_dir: /home/eventum
    networks:
      - backend
    build:
      context: ../.
      dockerfile: ./build/auth.dockerfile

  eventum_chat:
    container_name: eventumchat
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
    ports:
      - '3003:3003'
    command: bin/chat
    links:
      - eventumdb
      - pgbouncer
      - eventum_auth
    working_dir: /home/eventum
    networks:
      - backend
    build:
      context: ../.
      dockerfile: ./build/chat.dockerfile

  eventum_email:
    container_name: eventumemail
    restart: always
    environment:
      - EMAIL_LOGIN
      - EMAIL_PASSWORD
    ports:
      - '3004:3004'
    command: bin/email
    links:
      - eventumdb
      - pgbouncer
    working_dir: /home/eventum
    networks:
      - backend
    build:
      context: ../.
      dockerfile: ./build/email.dockerfile

  pgbouncer:
    container_name: pgbouncer
    restart: always
    build:
      context: ..
      dockerfile: ./build/pgbouncer.dockerfile
      args:
        dbuser: ${POSTGRES_USER}
        dbname: ${POSTGRES_DB}
        dbpasswd: ${POSTGRES_PASSWORD}
    links:
      - eventumdb
    networks:
      - backend
#    volumes:
#      - ../configs/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
#      - ../configs/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
    ports:
      - '6432:6432'

  eventumdb:
    container_name: eventumdb
    restart: always
    env_file:
      - .env
    build:
      context: ..
      dockerfile: ./build/db.dockerfile
      args:
        dbuser: ${POSTGRES_USER}
        dbname: ${POSTGRES_DB}
        dbpasswd: ${POSTGRES_PASSWORD}

    volumes:
      - ../scripts/init.sql:/home/eventum/init.sql
      - database-data:/var/lib/postgresql/data/
    #        - ./db/pg_hba.conf:/etc/postgresql/12/main/pg_hba.conf
    #        - ./db/postgresql.conf:/etc/postgresql/12/main/postgresql.conf
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - POSTGRES_DB
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - eventum_chat
      - eventum_serv
      - eventum_auth
      - eventum_email

volumes:
  database-data:

networks:
  backend:
