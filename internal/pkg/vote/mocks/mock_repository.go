// Code generated by MockGen. DO NOT EDIT.
// Source: failless/internal/pkg/vote (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddUserVote mocks base method
func (m *MockRepository) AddUserVote(arg0, arg1 int, arg2 int8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserVote", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserVote indicates an expected call of AddUserVote
func (mr *MockRepositoryMockRecorder) AddUserVote(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserVote", reflect.TypeOf((*MockRepository)(nil).AddUserVote), arg0, arg1, arg2)
}

// CheckMatching mocks base method
func (m *MockRepository) CheckMatching(arg0, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMatching", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMatching indicates an expected call of CheckMatching
func (mr *MockRepositoryMockRecorder) CheckMatching(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMatching", reflect.TypeOf((*MockRepository)(nil).CheckMatching), arg0, arg1)
}
