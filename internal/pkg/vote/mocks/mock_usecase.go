// Code generated by MockGen. DO NOT EDIT.
// Source: failless/internal/pkg/vote (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "failless/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockUseCase) Subscribe(arg0 *websocket.Conn, arg1 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0, arg1)
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockUseCaseMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockUseCase)(nil).Subscribe), arg0, arg1)
}

// VoteUser mocks base method
func (m *MockUseCase) VoteUser(arg0 models.Vote) models.WorkMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoteUser", arg0)
	ret0, _ := ret[0].(models.WorkMessage)
	return ret0
}

// VoteUser indicates an expected call of VoteUser
func (mr *MockUseCaseMockRecorder) VoteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteUser", reflect.TypeOf((*MockUseCase)(nil).VoteUser), arg0)
}
