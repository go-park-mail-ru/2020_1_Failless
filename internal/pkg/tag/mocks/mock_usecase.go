// Code generated by MockGen. DO NOT EDIT.
// Source: failless/internal/pkg/tag (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "failless/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// InitEventsByTime mocks base method
func (m *MockUseCase) InitEventsByTime(arg0 *models.TagList) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitEventsByTime", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitEventsByTime indicates an expected call of InitEventsByTime
func (mr *MockUseCaseMockRecorder) InitEventsByTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitEventsByTime", reflect.TypeOf((*MockUseCase)(nil).InitEventsByTime), arg0)
}
