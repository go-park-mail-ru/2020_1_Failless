// Code generated by MockGen. DO NOT EDIT.
// Source: failless/internal/pkg/chat (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	forms "failless/internal/pkg/forms"
	models "failless/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddNewMessage mocks base method
func (m *MockUseCase) AddNewMessage(arg0 *forms.Message) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewMessage", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewMessage indicates an expected call of AddNewMessage
func (mr *MockUseCaseMockRecorder) AddNewMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewMessage", reflect.TypeOf((*MockUseCase)(nil).AddNewMessage), arg0)
}

// CreateDialogue mocks base method
func (m *MockUseCase) CreateDialogue(arg0, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDialogue", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDialogue indicates an expected call of CreateDialogue
func (mr *MockUseCaseMockRecorder) CreateDialogue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDialogue", reflect.TypeOf((*MockUseCase)(nil).CreateDialogue), arg0, arg1)
}

// GetMessagesForChat mocks base method
func (m *MockUseCase) GetMessagesForChat(arg0 *models.MessageRequest) (forms.MessageList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesForChat", arg0)
	ret0, _ := ret[0].(forms.MessageList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesForChat indicates an expected call of GetMessagesForChat
func (mr *MockUseCaseMockRecorder) GetMessagesForChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesForChat", reflect.TypeOf((*MockUseCase)(nil).GetMessagesForChat), arg0)
}

// GetUserRooms mocks base method
func (m *MockUseCase) GetUserRooms(arg0 *models.ChatRequest) (models.ChatList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRooms", arg0)
	ret0, _ := ret[0].(models.ChatList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRooms indicates an expected call of GetUserRooms
func (mr *MockUseCaseMockRecorder) GetUserRooms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRooms", reflect.TypeOf((*MockUseCase)(nil).GetUserRooms), arg0)
}

// GetUsersForChat mocks base method
func (m *MockUseCase) GetUsersForChat(arg0 int64, arg1 *models.UserGeneralList) models.WorkMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersForChat", arg0, arg1)
	ret0, _ := ret[0].(models.WorkMessage)
	return ret0
}

// GetUsersForChat indicates an expected call of GetUsersForChat
func (mr *MockUseCaseMockRecorder) GetUsersForChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForChat", reflect.TypeOf((*MockUseCase)(nil).GetUsersForChat), arg0, arg1)
}

// IsUserHasRoom mocks base method
func (m *MockUseCase) IsUserHasRoom(arg0, arg1 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserHasRoom", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserHasRoom indicates an expected call of IsUserHasRoom
func (mr *MockUseCaseMockRecorder) IsUserHasRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserHasRoom", reflect.TypeOf((*MockUseCase)(nil).IsUserHasRoom), arg0, arg1)
}

// Subscribe mocks base method
func (m *MockUseCase) Subscribe(arg0 *websocket.Conn, arg1 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0, arg1)
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockUseCaseMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockUseCase)(nil).Subscribe), arg0, arg1)
}
