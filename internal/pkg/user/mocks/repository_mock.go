// Code generated by MockGen. DO NOT EDIT.
// Source: failless/internal/pkg/user (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "failless/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddNewUser mocks base method
func (m *MockRepository) AddNewUser(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewUser indicates an expected call of AddNewUser
func (mr *MockRepositoryMockRecorder) AddNewUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUser", reflect.TypeOf((*MockRepository)(nil).AddNewUser), arg0)
}

// AddUserInfo mocks base method
func (m *MockRepository) AddUserInfo(arg0 models.User, arg1 models.JsonInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserInfo indicates an expected call of AddUserInfo
func (mr *MockRepositoryMockRecorder) AddUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserInfo", reflect.TypeOf((*MockRepository)(nil).AddUserInfo), arg0, arg1)
}

// DeleteUser mocks base method
func (m *MockRepository) DeleteUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockRepositoryMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser), arg0)
}

// GetProfileInfo mocks base method
func (m *MockRepository) GetProfileInfo(arg0 int) (models.JsonInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileInfo", arg0)
	ret0, _ := ret[0].(models.JsonInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileInfo indicates an expected call of GetProfileInfo
func (mr *MockRepositoryMockRecorder) GetProfileInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileInfo", reflect.TypeOf((*MockRepository)(nil).GetProfileInfo), arg0)
}

// GetRandomFeedUsers mocks base method
func (m *MockRepository) GetRandomFeedUsers(arg0, arg1, arg2 int) ([]models.UserGeneral, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomFeedUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.UserGeneral)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomFeedUsers indicates an expected call of GetRandomFeedUsers
func (mr *MockRepositoryMockRecorder) GetRandomFeedUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomFeedUsers", reflect.TypeOf((*MockRepository)(nil).GetRandomFeedUsers), arg0, arg1, arg2)
}

// GetUserByPhoneOrEmail mocks base method
func (m *MockRepository) GetUserByPhoneOrEmail(arg0, arg1 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhoneOrEmail", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhoneOrEmail indicates an expected call of GetUserByPhoneOrEmail
func (mr *MockRepositoryMockRecorder) GetUserByPhoneOrEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhoneOrEmail", reflect.TypeOf((*MockRepository)(nil).GetUserByPhoneOrEmail), arg0, arg1)
}

// GetUserByUID mocks base method
func (m *MockRepository) GetUserByUID(arg0 int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUID", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUID indicates an expected call of GetUserByUID
func (mr *MockRepositoryMockRecorder) GetUserByUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUID", reflect.TypeOf((*MockRepository)(nil).GetUserByUID), arg0)
}

// GetUserTags mocks base method
func (m *MockRepository) GetUserTags(arg0 int) ([]models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTags", arg0)
	ret0, _ := ret[0].([]models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTags indicates an expected call of GetUserTags
func (mr *MockRepositoryMockRecorder) GetUserTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTags", reflect.TypeOf((*MockRepository)(nil).GetUserTags), arg0)
}

// GetUsersForChat mocks base method
func (m *MockRepository) GetUsersForChat(arg0 int64, arg1 *models.UserGeneralList) models.WorkMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersForChat", arg0, arg1)
	ret0, _ := ret[0].(models.WorkMessage)
	return ret0
}

// GetUsersForChat indicates an expected call of GetUsersForChat
func (mr *MockRepositoryMockRecorder) GetUsersForChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForChat", reflect.TypeOf((*MockRepository)(nil).GetUsersForChat), arg0, arg1)
}

// GetValidTags mocks base method
func (m *MockRepository) GetValidTags() ([]models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidTags")
	ret0, _ := ret[0].([]models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidTags indicates an expected call of GetValidTags
func (mr *MockRepositoryMockRecorder) GetValidTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidTags", reflect.TypeOf((*MockRepository)(nil).GetValidTags))
}

// SetUserLocation mocks base method
func (m *MockRepository) SetUserLocation(arg0 int, arg1 models.LocationPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserLocation indicates an expected call of SetUserLocation
func (mr *MockRepositoryMockRecorder) SetUserLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserLocation", reflect.TypeOf((*MockRepository)(nil).SetUserLocation), arg0, arg1)
}

// UpdUserGeneral mocks base method
func (m *MockRepository) UpdUserGeneral(arg0 models.JsonInfo, arg1 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdUserGeneral", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdUserGeneral indicates an expected call of UpdUserGeneral
func (mr *MockRepositoryMockRecorder) UpdUserGeneral(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdUserGeneral", reflect.TypeOf((*MockRepository)(nil).UpdUserGeneral), arg0, arg1)
}

// UpdateUserAbout mocks base method
func (m *MockRepository) UpdateUserAbout(arg0 int, arg1 string) models.WorkMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAbout", arg0, arg1)
	ret0, _ := ret[0].(models.WorkMessage)
	return ret0
}

// UpdateUserAbout indicates an expected call of UpdateUserAbout
func (mr *MockRepositoryMockRecorder) UpdateUserAbout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAbout", reflect.TypeOf((*MockRepository)(nil).UpdateUserAbout), arg0, arg1)
}

// UpdateUserPhotos mocks base method
func (m *MockRepository) UpdateUserPhotos(arg0 int, arg1 *[]string) models.WorkMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPhotos", arg0, arg1)
	ret0, _ := ret[0].(models.WorkMessage)
	return ret0
}

// UpdateUserPhotos indicates an expected call of UpdateUserPhotos
func (mr *MockRepositoryMockRecorder) UpdateUserPhotos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhotos", reflect.TypeOf((*MockRepository)(nil).UpdateUserPhotos), arg0, arg1)
}

// UpdateUserRating mocks base method
func (m *MockRepository) UpdateUserRating(arg0 int, arg1 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRating", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRating indicates an expected call of UpdateUserRating
func (mr *MockRepositoryMockRecorder) UpdateUserRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRating", reflect.TypeOf((*MockRepository)(nil).UpdateUserRating), arg0, arg1)
}

// UpdateUserTags mocks base method
func (m *MockRepository) UpdateUserTags(arg0 int, arg1 []int) models.WorkMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserTags", arg0, arg1)
	ret0, _ := ret[0].(models.WorkMessage)
	return ret0
}

// UpdateUserTags indicates an expected call of UpdateUserTags
func (mr *MockRepositoryMockRecorder) UpdateUserTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserTags", reflect.TypeOf((*MockRepository)(nil).UpdateUserTags), arg0, arg1)
}
