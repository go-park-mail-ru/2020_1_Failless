// Code generated by MockGen. DO NOT EDIT.
// Source: failless/internal/pkg/user (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	forms "failless/internal/pkg/forms"
	models "failless/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// UpdateUserPhotos mocks base method
func (m *MockUseCase) AddImageToProfile(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPhotos", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPhotos indicates an expected call of UpdateUserPhotos
func (mr *MockUseCaseMockRecorder) AddImageToProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhotos", reflect.TypeOf((*MockUseCase)(nil).AddImageToProfile), arg0, arg1)
}

// FillFormIfExist mocks base method
func (m *MockUseCase) FillFormIfExist(arg0 *models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FillFormIfExist", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FillFormIfExist indicates an expected call of FillFormIfExist
func (mr *MockUseCaseMockRecorder) FillFormIfExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillFormIfExist", reflect.TypeOf((*MockUseCase)(nil).FillFormIfExist), arg0)
}

// GetUserInfo mocks base method
func (m *MockUseCase) GetUserInfo(arg0 *forms.GeneralForm) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo
func (mr *MockUseCaseMockRecorder) GetUserInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUseCase)(nil).GetUserInfo), arg0)
}

// RegisterNewUser mocks base method
func (m *MockUseCase) RegisterNewUser(arg0 *forms.SignForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNewUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterNewUser indicates an expected call of RegisterNewUser
func (mr *MockUseCaseMockRecorder) RegisterNewUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNewUser", reflect.TypeOf((*MockUseCase)(nil).RegisterNewUser), arg0)
}

// UpdateUserBase mocks base method
func (m *MockUseCase) UpdateUserBase(arg0 *forms.SignForm) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBase", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserBase indicates an expected call of UpdateUserBase
func (mr *MockUseCaseMockRecorder) UpdateUserBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBase", reflect.TypeOf((*MockUseCase)(nil).UpdateUserBase), arg0)
}

// UpdateUserInfo mocks base method
func (m *MockUseCase) UpdateUserInfo(arg0 *forms.GeneralForm) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo
func (mr *MockUseCaseMockRecorder) UpdateUserInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockUseCase)(nil).UpdateUserInfo), arg0)
}

// UpdateUserMeta mocks base method
func (m *MockUseCase) UpdateUserMeta(arg0 *forms.MetaForm) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserMeta", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserMeta indicates an expected call of UpdateUserMeta
func (mr *MockUseCaseMockRecorder) UpdateUserMeta(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserMeta", reflect.TypeOf((*MockUseCase)(nil).UpdateUserMeta), arg0)
}
