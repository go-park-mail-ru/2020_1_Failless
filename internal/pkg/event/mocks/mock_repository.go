// Code generated by MockGen. DO NOT EDIT.
// Source: failless/internal/pkg/event (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "failless/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAllEvents mocks base method
func (m *MockRepository) GetAllEvents() ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvents")
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEvents indicates an expected call of GetAllEvents
func (mr *MockRepositoryMockRecorder) GetAllEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockRepository)(nil).GetAllEvents))
}

// GetEventsByKeyWord mocks base method
func (m *MockRepository) GetEventsByKeyWord(arg0 string, arg1 int) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByKeyWord", arg0, arg1)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByKeyWord indicates an expected call of GetEventsByKeyWord
func (mr *MockRepositoryMockRecorder) GetEventsByKeyWord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByKeyWord", reflect.TypeOf((*MockRepository)(nil).GetEventsByKeyWord), arg0, arg1)
}

// GetFeedEvents mocks base method
func (m *MockRepository) GetFeedEvents(arg0, arg1, arg2 int) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedEvents indicates an expected call of GetFeedEvents
func (mr *MockRepositoryMockRecorder) GetFeedEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedEvents", reflect.TypeOf((*MockRepository)(nil).GetFeedEvents), arg0, arg1, arg2)
}

// GetNameByID mocks base method
func (m *MockRepository) GetNameByID(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNameByID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNameByID indicates an expected call of GetNameByID
func (mr *MockRepositoryMockRecorder) GetNameByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNameByID", reflect.TypeOf((*MockRepository)(nil).GetNameByID), arg0)
}

// GetNewEventsByTags mocks base method
func (m *MockRepository) GetNewEventsByTags(arg0 []int, arg1, arg2, arg3 int) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewEventsByTags", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewEventsByTags indicates an expected call of GetNewEventsByTags
func (mr *MockRepositoryMockRecorder) GetNewEventsByTags(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewEventsByTags", reflect.TypeOf((*MockRepository)(nil).GetNewEventsByTags), arg0, arg1, arg2, arg3)
}

// GetValidTags mocks base method
func (m *MockRepository) GetValidTags() ([]models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidTags")
	ret0, _ := ret[0].([]models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidTags indicates an expected call of GetValidTags
func (mr *MockRepositoryMockRecorder) GetValidTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidTags", reflect.TypeOf((*MockRepository)(nil).GetValidTags))
}

// SaveNewEvent mocks base method
func (m *MockRepository) SaveNewEvent(arg0 *models.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNewEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNewEvent indicates an expected call of SaveNewEvent
func (mr *MockRepositoryMockRecorder) SaveNewEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNewEvent", reflect.TypeOf((*MockRepository)(nil).SaveNewEvent), arg0)
}
