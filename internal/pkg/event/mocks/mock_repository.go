// Code generated by MockGen. DO NOT EDIT.
// Source: failless/internal/pkg/event (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "failless/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateMidEvent mocks base method
func (m *MockRepository) CreateMidEvent(arg0 *models.MidEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMidEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMidEvent indicates an expected call of CreateMidEvent
func (mr *MockRepositoryMockRecorder) CreateMidEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMidEvent", reflect.TypeOf((*MockRepository)(nil).CreateMidEvent), arg0)
}

// CreateSmallEvent mocks base method
func (m *MockRepository) CreateSmallEvent(arg0 *models.SmallEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSmallEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSmallEvent indicates an expected call of CreateSmallEvent
func (mr *MockRepositoryMockRecorder) CreateSmallEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSmallEvent", reflect.TypeOf((*MockRepository)(nil).CreateSmallEvent), arg0)
}

// DeleteSmallEvent mocks base method
func (m *MockRepository) DeleteSmallEvent(arg0 int, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSmallEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSmallEvent indicates an expected call of DeleteSmallEvent
func (mr *MockRepositoryMockRecorder) DeleteSmallEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSmallEvent", reflect.TypeOf((*MockRepository)(nil).DeleteSmallEvent), arg0, arg1)
}

// FollowBigEvent mocks base method
func (m *MockRepository) FollowBigEvent(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowBigEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FollowBigEvent indicates an expected call of FollowBigEvent
func (mr *MockRepositoryMockRecorder) FollowBigEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowBigEvent", reflect.TypeOf((*MockRepository)(nil).FollowBigEvent), arg0, arg1)
}

// GetAllMidEvents mocks base method
func (m *MockRepository) GetAllMidEvents(arg0 *models.MidEventList, arg1 *models.EventRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMidEvents", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMidEvents indicates an expected call of GetAllMidEvents
func (mr *MockRepositoryMockRecorder) GetAllMidEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMidEvents", reflect.TypeOf((*MockRepository)(nil).GetAllMidEvents), arg0, arg1)
}

// GetMidEventsWithFollowed mocks base method
func (m *MockRepository) GetMidEventsWithFollowed(arg0 *models.MidEventList, arg1 *models.EventRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMidEventsWithFollowed", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMidEventsWithFollowed indicates an expected call of GetMidEventsWithFollowed
func (mr *MockRepositoryMockRecorder) GetMidEventsWithFollowed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMidEventsWithFollowed", reflect.TypeOf((*MockRepository)(nil).GetMidEventsWithFollowed), arg0, arg1)
}

// GetNameByID mocks base method
func (m *MockRepository) GetNameByID(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNameByID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNameByID indicates an expected call of GetNameByID
func (mr *MockRepositoryMockRecorder) GetNameByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNameByID", reflect.TypeOf((*MockRepository)(nil).GetNameByID), arg0)
}

// GetOwnMidEvents mocks base method
func (m *MockRepository) GetOwnMidEvents(arg0 *models.MidEventList, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnMidEvents", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnMidEvents indicates an expected call of GetOwnMidEvents
func (mr *MockRepositoryMockRecorder) GetOwnMidEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnMidEvents", reflect.TypeOf((*MockRepository)(nil).GetOwnMidEvents), arg0, arg1)
}

// GetOwnMidEventsWithAnotherUserFollowed mocks base method
func (m *MockRepository) GetOwnMidEventsWithAnotherUserFollowed(arg0 *models.MidEventList, arg1, arg2 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnMidEventsWithAnotherUserFollowed", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnMidEventsWithAnotherUserFollowed indicates an expected call of GetOwnMidEventsWithAnotherUserFollowed
func (mr *MockRepositoryMockRecorder) GetOwnMidEventsWithAnotherUserFollowed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnMidEventsWithAnotherUserFollowed", reflect.TypeOf((*MockRepository)(nil).GetOwnMidEventsWithAnotherUserFollowed), arg0, arg1, arg2)
}

// GetSmallEventsForUser mocks base method
func (m *MockRepository) GetSmallEventsForUser(arg0 *models.SmallEventList, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSmallEventsForUser", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSmallEventsForUser indicates an expected call of GetSmallEventsForUser
func (mr *MockRepositoryMockRecorder) GetSmallEventsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSmallEventsForUser", reflect.TypeOf((*MockRepository)(nil).GetSmallEventsForUser), arg0, arg1)
}

// GetSubscriptionMidEvents mocks base method
func (m *MockRepository) GetSubscriptionMidEvents(arg0 *models.MidEventList, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionMidEvents", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionMidEvents indicates an expected call of GetSubscriptionMidEvents
func (mr *MockRepositoryMockRecorder) GetSubscriptionMidEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionMidEvents", reflect.TypeOf((*MockRepository)(nil).GetSubscriptionMidEvents), arg0, arg1)
}

// GetSubscriptionMidEventsWithAnotherUserFollowed mocks base method
func (m *MockRepository) GetSubscriptionMidEventsWithAnotherUserFollowed(arg0 *models.MidEventList, arg1, arg2 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionMidEventsWithAnotherUserFollowed", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionMidEventsWithAnotherUserFollowed indicates an expected call of GetSubscriptionMidEventsWithAnotherUserFollowed
func (mr *MockRepositoryMockRecorder) GetSubscriptionMidEventsWithAnotherUserFollowed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionMidEventsWithAnotherUserFollowed", reflect.TypeOf((*MockRepository)(nil).GetSubscriptionMidEventsWithAnotherUserFollowed), arg0, arg1, arg2)
}

// GetValidTags mocks base method
func (m *MockRepository) GetValidTags() ([]models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidTags")
	ret0, _ := ret[0].([]models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidTags indicates an expected call of GetValidTags
func (mr *MockRepositoryMockRecorder) GetValidTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidTags", reflect.TypeOf((*MockRepository)(nil).GetValidTags))
}

// JoinMidEvent mocks base method
func (m *MockRepository) JoinMidEvent(arg0, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinMidEvent", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinMidEvent indicates an expected call of JoinMidEvent
func (mr *MockRepositoryMockRecorder) JoinMidEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinMidEvent", reflect.TypeOf((*MockRepository)(nil).JoinMidEvent), arg0, arg1)
}

// LeaveMidEvent mocks base method
func (m *MockRepository) LeaveMidEvent(arg0, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveMidEvent", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveMidEvent indicates an expected call of LeaveMidEvent
func (mr *MockRepositoryMockRecorder) LeaveMidEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveMidEvent", reflect.TypeOf((*MockRepository)(nil).LeaveMidEvent), arg0, arg1)
}

// UnfollowBigEvent mocks base method
func (m *MockRepository) UnfollowBigEvent(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfollowBigEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnfollowBigEvent indicates an expected call of UnfollowBigEvent
func (mr *MockRepositoryMockRecorder) UnfollowBigEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfollowBigEvent", reflect.TypeOf((*MockRepository)(nil).UnfollowBigEvent), arg0, arg1)
}

// UpdateSmallEvent mocks base method
func (m *MockRepository) UpdateSmallEvent(arg0 *models.SmallEvent) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSmallEvent", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSmallEvent indicates an expected call of UpdateSmallEvent
func (mr *MockRepositoryMockRecorder) UpdateSmallEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSmallEvent", reflect.TypeOf((*MockRepository)(nil).UpdateSmallEvent), arg0)
}
