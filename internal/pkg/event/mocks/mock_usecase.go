// Code generated by MockGen. DO NOT EDIT.
// Source: failless/internal/pkg/event (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	forms "failless/internal/pkg/forms"
	models "failless/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateMidEvent mocks base method
func (m *MockUseCase) CreateMidEvent(arg0 *forms.MidEventForm) (models.MidEvent, models.WorkMessage) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMidEvent", arg0)
	ret0, _ := ret[0].(models.MidEvent)
	ret1, _ := ret[1].(models.WorkMessage)
	return ret0, ret1
}

// CreateMidEvent indicates an expected call of CreateMidEvent
func (mr *MockUseCaseMockRecorder) CreateMidEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMidEvent", reflect.TypeOf((*MockUseCase)(nil).CreateMidEvent), arg0)
}

// CreateSmallEvent mocks base method
func (m *MockUseCase) CreateSmallEvent(arg0 *forms.SmallEventForm) (models.SmallEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSmallEvent", arg0)
	ret0, _ := ret[0].(models.SmallEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSmallEvent indicates an expected call of CreateSmallEvent
func (mr *MockUseCaseMockRecorder) CreateSmallEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSmallEvent", reflect.TypeOf((*MockUseCase)(nil).CreateSmallEvent), arg0)
}

// DeleteSmallEvent mocks base method
func (m *MockUseCase) DeleteSmallEvent(arg0 int, arg1 int64) models.WorkMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSmallEvent", arg0, arg1)
	ret0, _ := ret[0].(models.WorkMessage)
	return ret0
}

// DeleteSmallEvent indicates an expected call of DeleteSmallEvent
func (mr *MockUseCaseMockRecorder) DeleteSmallEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSmallEvent", reflect.TypeOf((*MockUseCase)(nil).DeleteSmallEvent), arg0, arg1)
}

// GetSmallEventsByUID mocks base method
func (m *MockUseCase) GetSmallEventsByUID(arg0 int64) (models.SmallEventList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSmallEventsByUID", arg0)
	ret0, _ := ret[0].(models.SmallEventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSmallEventsByUID indicates an expected call of GetSmallEventsByUID
func (mr *MockUseCaseMockRecorder) GetSmallEventsByUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSmallEventsByUID", reflect.TypeOf((*MockUseCase)(nil).GetSmallEventsByUID), arg0)
}

// JoinMidEvent mocks base method
func (m *MockUseCase) JoinMidEvent(arg0 *models.EventFollow) models.WorkMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinMidEvent", arg0)
	ret0, _ := ret[0].(models.WorkMessage)
	return ret0
}

// JoinMidEvent indicates an expected call of JoinMidEvent
func (mr *MockUseCaseMockRecorder) JoinMidEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinMidEvent", reflect.TypeOf((*MockUseCase)(nil).JoinMidEvent), arg0)
}

// LeaveMidEvent mocks base method
func (m *MockUseCase) LeaveMidEvent(arg0 *models.EventFollow) models.WorkMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveMidEvent", arg0)
	ret0, _ := ret[0].(models.WorkMessage)
	return ret0
}

// LeaveMidEvent indicates an expected call of LeaveMidEvent
func (mr *MockUseCaseMockRecorder) LeaveMidEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveMidEvent", reflect.TypeOf((*MockUseCase)(nil).LeaveMidEvent), arg0)
}

// SearchEventsByUserPreferences mocks base method
func (m *MockUseCase) SearchEventsByUserPreferences(arg0 *models.MidAndBigEventList, arg1 *models.EventRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEventsByUserPreferences", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEventsByUserPreferences indicates an expected call of SearchEventsByUserPreferences
func (mr *MockUseCaseMockRecorder) SearchEventsByUserPreferences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEventsByUserPreferences", reflect.TypeOf((*MockUseCase)(nil).SearchEventsByUserPreferences), arg0, arg1)
}

// UpdateSmallEvent mocks base method
func (m *MockUseCase) UpdateSmallEvent(arg0 *models.SmallEvent) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSmallEvent", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSmallEvent indicates an expected call of UpdateSmallEvent
func (mr *MockUseCaseMockRecorder) UpdateSmallEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSmallEvent", reflect.TypeOf((*MockUseCase)(nil).UpdateSmallEvent), arg0)
}
